{"version":3,"sources":["SudokuGame/data/status.enum.ts","SudokuGame/helpers/validateRowsUtils.ts","SudokuGame/helpers/validateBoard.ts","SudokuGame/data/constants.ts","SudokuGame/helpers/validateSquaresUtils.ts","SudokuGame/helpers/validateInput.ts","SudokuGame/helpers/getInitialBoardWithStatus.ts","SudokuGame/InputWrapper.tsx","SudokuGame/GameControlPanel.tsx","SudokuGame/Picker.tsx","SudokuGame/SudokuBoardTable.tsx","SudokuGame/helpers/checkCompletion.ts","SudokuGame/helpers/getMessage.ts","SudokuGame/StatusMessage.tsx","SudokuGame/SudokuGame.tsx","App.tsx","index.tsx"],"names":["Status","status","transpose","sudoku","map","cell","idx","startingPoints","pickerTable","peerSquareTransform","row","col","transformedArray","i","push","setStatus","newStatus","checkForErrors","sudokuBoard","value","mapBoardToValues","forEach","duplicates","length","indexOf","findDuplicates","filter","result","isPrefilled","isError","ERRORS","validateRows","validateColumns","validateSquares","validateBoard","IN_PROGRESS","isInputValid","input","JSON","parse","e","isJsonString","parsedInput","Array","isArray","areElementsCorrectArrays","includesIn","includes","every","isEitherDigitOrNull","validateTable","createBoardFromInput","isSolvable","defaultBoardValues","mapInitialBoard","InputWrapper","inputValue","onChange","htmlFor","data-testid","id","placeholder","target","rows","cols","ControlPanelWrapper","styled","div","StyledButton","button","GameControlPanel","onValidate","onReset","onStart","onInputValueChange","onClick","disabled","StyledPicker","table","PickerCell","td","Picker","onPick","rowIdx","Board","BoardRow","tr","BoardCell","isSelected","SudokuBoardTable","sudokuBoardValues","selected","onSelect","pos1","pos2","cellIdx","isSudokuComplete","j","getMessage","message","COMPLETED","PLAYING","WRONG_INPUT","Message","p","StatusMessage","StyledGame","main","SudokuGame","useState","setSelected","setSudokuBoard","setInputValue","onGetInitialBoardWithStatus","getInitialBoardWithStatus","stringify","useEffect","updatedBoard","stopPropagation","localBoard","cellPosition","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31ca4102.chunk.js","sourcesContent":["export enum Status {\n  COMPLETED,\n  ERRORS,\n  IN_PROGRESS,\n  PLAYING,\n  WRONG_INPUT,\n}\n","import {\n  SudokuBoard,\n  SudokuBoardCell,\n  SudokuBoardRow,\n} from \"../types/board.type\";\n\nconst transpose = (sudoku: SudokuBoard): SudokuBoard => {\n  return sudoku[0].map((cell: SudokuBoardCell, idx: number) =>\n    sudoku.map((cell: SudokuBoardRow) => cell[idx])\n  );\n};\n\nexport default transpose;\n","import { Status } from \"../data/status.enum\";\nimport {\n  RawSudokuBoard,\n  RawSudokuBoardCell,\n  RawSudokuBoardRow,\n  SudokuBoard,\n  SudokuBoardCell,\n  SudokuBoardRow,\n  SudokuBoardWithStatus,\n} from \"../types/board.type\";\nimport transpose from \"./validateRowsUtils\";\nimport peerSquareTransform from \"./validateSquaresUtils\";\n\nlet status: Status;\n\nconst setStatus = (newStatus: Status): void => {\n  status = newStatus;\n};\n\nconst mapBoardToValues = (sudokuBoard: SudokuBoard): RawSudokuBoard => {\n  return sudokuBoard.map((row: SudokuBoardRow) => {\n    return row.map((cell: SudokuBoardCell) => cell.value);\n  });\n};\n\nconst findDuplicates = (row: RawSudokuBoardRow): number[] => {\n  const duplicates: number[] = [];\n  for (let i = 0; i < row.length - 1; i++) {\n    if (\n      duplicates.indexOf(row[i] as number) === -1 &&\n      row.indexOf(row[i], i + 1) !== -1\n    ) {\n      duplicates.push(row[i] as number);\n    }\n  }\n  return duplicates;\n};\n\nconst checkForErrors = (sudokuBoard: SudokuBoard): SudokuBoard => {\n  mapBoardToValues(sudokuBoard).forEach(\n    (row: RawSudokuBoardRow, idx: number) => {\n      const filteredRow = row.filter(\n        (cell: RawSudokuBoardCell) => cell !== null\n      ) as number[];\n      const duplicates: number[] = findDuplicates(filteredRow);\n\n      if (duplicates.length) {\n        duplicates.forEach((result: number) => {\n          sudokuBoard[idx].forEach((cell: SudokuBoardCell) => {\n            if (cell.value === result && !cell.isPrefilled) {\n              cell.isError = true;\n            }\n          });\n        });\n        setStatus(Status.ERRORS);\n      }\n    }\n  );\n  return sudokuBoard;\n};\n\nconst validateRows = (sudokuBoard: SudokuBoard): SudokuBoard => {\n  return checkForErrors(sudokuBoard);\n};\n\nconst validateColumns = (sudokuBoard: SudokuBoard): SudokuBoard => {\n  return transpose(checkForErrors(transpose(sudokuBoard)));\n};\n\nconst validateSquares = (sudokuBoard: SudokuBoard): SudokuBoard => {\n  return peerSquareTransform(checkForErrors(peerSquareTransform(sudokuBoard)));\n};\n\nconst validateBoard = (sudokuBoard: SudokuBoard): SudokuBoardWithStatus => {\n  setStatus(Status.IN_PROGRESS);\n  return {\n    sudokuBoard: validateSquares(validateColumns(validateRows(sudokuBoard))),\n    status,\n  };\n};\n\nexport { mapBoardToValues, checkForErrors };\n\nexport default validateBoard;\n","export const startingPoints: number[][] = [\n  [0, 0],\n  [0, 3],\n  [0, 6],\n  [3, 0],\n  [3, 3],\n  [3, 6],\n  [6, 0],\n  [6, 3],\n  [6, 6],\n];\n\nexport const pickerTable: number[][] = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n","import { startingPoints } from \"../data/constants\";\nimport { SudokuBoard, SudokuBoardRow } from \"../types/board.type\";\n\nconst peerSquareTransform = (sudoku: SudokuBoard): SudokuBoard => {\n  return startingPoints.map(\n    ([row, col]: number[]): SudokuBoardRow => {\n      const transformedArray = [];\n      for (let i = 0; i <= 2; i++) {\n        transformedArray.push(\n          sudoku[row + i][col],\n          sudoku[row + i][col + 1],\n          sudoku[row + i][col + 2]\n        );\n      }\n      return transformedArray;\n    }\n  );\n};\n\nexport default peerSquareTransform;\n","import { Status } from \"../data/status.enum\";\nimport {\n  RawSudokuBoard,\n  RawSudokuBoardCell,\n  RawSudokuBoardRow,\n  SudokuBoard,\n} from \"../types/board.type\";\nimport validateTable from \"./validateBoard\";\n\nconst isJsonString = (input: string): boolean => {\n  try {\n    JSON.parse(input);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\nconst areElementsCorrectArrays = (input: RawSudokuBoard): boolean => {\n  for (let i = 0; i < input.length; i++) {\n    if (!Array.isArray(input[i]) || !(input[i].length === 9)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEitherDigitOrNull = (input: RawSudokuBoard): boolean => {\n  const includesIn = (value: any): boolean =>\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, null].includes(value);\n  for (let i = 0; i < input.length; i++) {\n    if (!input[i].every(includesIn)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst createBoardFromInput = (input: RawSudokuBoard): SudokuBoard => {\n  return input.map((row: RawSudokuBoardRow) => {\n    return row.map((cell: RawSudokuBoardCell) => ({\n      value: cell,\n      isPrefilled: false,\n      isError: false,\n    }));\n  });\n};\n\nconst isSolvable = (input: RawSudokuBoard): boolean => {\n  const { status } = validateTable(createBoardFromInput(input));\n  return status !== Status.ERRORS;\n};\n\nconst isInputValid = (input: string): boolean => {\n  if (!isJsonString(input)) {\n    return false;\n  }\n  const parsedInput = JSON.parse(input);\n  if (!Array.isArray(parsedInput)) {\n    return false;\n  }\n  if (parsedInput.length !== 9) {\n    return false;\n  }\n  if (!areElementsCorrectArrays(parsedInput)) {\n    return false;\n  }\n  if (!isEitherDigitOrNull(parsedInput)) {\n    return false;\n  }\n  if (!isSolvable(parsedInput)) {\n    return false;\n  }\n  return true;\n};\n\nexport default isInputValid;\n","import { Status } from \"../data/status.enum\";\nimport {\n  RawSudokuBoard,\n  RawSudokuBoardCell,\n  RawSudokuBoardRow,\n  SudokuBoard,\n  SudokuBoardWithStatus,\n} from \"../types/board.type\";\nimport isInputValid from \"./validateInput\";\n\nlet defaultBoardValues: RawSudokuBoard = [\n  [6, null, null, null, null, null, 8, 7, 2],\n  [null, 7, 5, null, null, 1, 6, null, null],\n  [null, null, null, null, null, 2, null, null, 3],\n  [null, 2, null, null, null, null, 9, 4, null],\n  [null, null, 4, 3, null, 6, null, null, 1],\n  [null, 6, 9, null, null, 4, null, null, 5],\n  [null, null, null, 9, null, null, null, null, null],\n  [4, null, 2, 7, null, null, 1, null, 8],\n  [null, null, null, 4, null, null, null, 2, 6],\n];\n\n// let defaultBoardValues = [\n//     [6, 2, 2, 2, 2, 3, 8, 7, 2],\n//     [2, 7, 5, 3, 3, 1, 6, 3, 3],\n//     [2, 3, 3, 3, 3, 2, 3, 3, 3],\n//     [2, 2, 3, 3, null, 3, 9, 4, 3],\n//     [2, 3, 4, 3, 3, 6, 3, 3, 1],\n//     [3, 6, 9, 3, 3, 4, 3, 3, 5],\n//     [3, 3, 3, 9, 3, 3, 3, 3, 3],\n//     [4, 3, 2, 7, 3, 3, 1, 3, 8],\n//     [3, 3, 3, 4, 3, 3, 3, null, 6],\n//   ];\n\n// let defaultBoardValues = [\n//   [null, 8, 6, 2, 4, 7, 5, 1, 3],\n//   [7, 5, 1, 3, 8, 6, 2, 9, 4],\n//   [4, 2, 3, 5, 9, 1, 7, 8, 6],\n//   [2, 4, 9, 7, 5, 8, 3, 6, 1],\n//   [1, 7, 8, 6, 3, 4, 9, 2, 5],\n//   [3, 6, 5, 9, 1, 2, 8, 4, 7],\n//   [8, 3, 7, 4, 6, 9, 1, 5, 2],\n//   [5, 1, 4, 8, 2, 3, 6, 7, 9],\n//   [6, 9, 2, 1, 7, 5, 4, 3, 8],\n// ];\n\n// let defaultBoardValues = [\n//   [null, 8, 6, 2, 4, 7, 5, 1, null],\n//   [7, 5, 1, 3, 8, 6, 2, 9, 4],\n//   [null, 2, 3, 5, 9, 1, 7, 8, null],\n//   [2, 4, 9, 7, 5, 8, 3, 6, 1],\n//   [1, 7, 8, 6, 3, 4, 9, 2, 5],\n//   [3, 6, 5, 9, 1, 2, 8, 4, 7],\n//   [8, 3, 7, 4, null, 9, 1, 5, 2],\n//   [5, 1, 4, 8, 2, 3, 6, 7, 9],\n//   [6, 9, 2, 1, 7, 5, 4, 3, 8],\n// ];\n\nconst mapInitialBoard = (input: RawSudokuBoard): SudokuBoard => {\n  return input.map((row: RawSudokuBoardRow) => {\n    return row.map((cell: RawSudokuBoardCell) => ({\n      value: cell,\n      isPrefilled: !!cell,\n      isError: false,\n    }));\n  });\n};\n\nconst getInitialBoardWithStatus = (input?: string): SudokuBoardWithStatus => {\n  if (!input) {\n    return {\n      sudokuBoard: mapInitialBoard(defaultBoardValues),\n      status: Status.PLAYING,\n    };\n  }\n  if (!isInputValid(input)) {\n    return {\n      sudokuBoard: mapInitialBoard(defaultBoardValues),\n      status: Status.WRONG_INPUT,\n    };\n  }\n  defaultBoardValues = JSON.parse(input);\n  return {\n    sudokuBoard: mapInitialBoard(defaultBoardValues),\n    status: Status.PLAYING,\n  };\n};\n\nexport { getInitialBoardWithStatus, mapInitialBoard };\n\n/* \n[[3,null,null,null,null,null,8,7,2],[null,7,5,null,null,1,6,null,null],[null,null,null,null,null,2,null,null,3],[null,2,null,null,null,null,9,4,null],[null,null,4,3,null,6,null,null,1],[null,6,9,null,null,4,null,null,5],[null,null,null,9,null,null,null,null,null],[4,null,2,7,null,null,1,null,8],[null,null,null,4,null,null,null,2,6]]\n*/\n","type InputWrapperProps = {\n  inputValue: string;\n  onChange: (value: string) => void;\n};\n\nconst InputWrapper = ({ inputValue, onChange }: InputWrapperProps) => {\n  return (\n    <label htmlFor=\"custom-start-point\" data-testid=\"input-wrapper\">\n      <textarea\n        id=\"custom-start-point\"\n        data-testid=\"textarea\"\n        placeholder=\"Provide valid 2D array containing digits and nulls to start a game...\"\n        value={inputValue}\n        onChange={(e) => onChange(e.target.value)}\n        rows={5}\n        cols={30}\n      />\n    </label>\n  );\n};\n\nexport default InputWrapper;\n","import styled from \"styled-components\";\nimport InputWrapper from \"./InputWrapper\";\n\nconst ControlPanelWrapper = styled.div`\n  flex: 0 1 300px;\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: center;\n  justify-content: flex-start;\n  margin: 20px 0;\n`;\n\nconst StyledButton = styled.button`\n  font-size: 16px;\n  width: 160px;\n  height: 50px;\n  line-height: 48px;\n  background-color: none;\n  border: 1px solid #a89243;\n  border-radius: 4px;\n  color: #a89243;\n  outline: none;\n  margin-bottom: 20px;\n  cursor: pointer;\n\n  &:disabled {\n    border: 1px solid #333;\n    color: #333;\n    cursor: initial;\n  }\n`;\n\ntype GameControlPanelProps = {\n  onValidate: () => void;\n  onReset: () => void;\n  onStart: () => void;\n  inputValue: string;\n  onInputValueChange: (value: string) => void;\n};\n\nconst GameControlPanel = ({\n  onValidate,\n  onReset,\n  onStart,\n  inputValue,\n  onInputValueChange,\n}: GameControlPanelProps) => {\n  return (\n    <ControlPanelWrapper>\n      <StyledButton data-testid=\"validate-button\" onClick={onValidate}>\n        Validate\n      </StyledButton>\n      <StyledButton data-testid=\"reset-button\" onClick={onReset}>\n        Reset\n      </StyledButton>\n      <StyledButton\n        data-testid=\"start-button\"\n        disabled={!inputValue}\n        onClick={onStart}\n      >\n        Start from input\n      </StyledButton>\n      <InputWrapper inputValue={inputValue} onChange={onInputValueChange} />\n    </ControlPanelWrapper>\n  );\n};\n\nexport default GameControlPanel;\n","import styled from \"styled-components\";\nimport { pickerTable } from \"./data/constants\";\n\nconst StyledPicker = styled.table`\n  border-collapse: collapse;\n  font-size: 16px;\n  color: #333;\n  border: none;\n`;\n\nconst PickerCell = styled.td`\n  border: 1px solid #333;\n  width: 30px;\n  height: 30px;\n  box-sizing: border-box;\n  text-align: center;\n  vertical-align: middle;\n`;\n\ntype PickerProps = {\n  onPick: (\n    e: React.MouseEvent<HTMLTableDataCellElement>,\n    value: number\n  ) => void;\n};\n\nconst Picker = ({ onPick }: PickerProps) => {\n  return (\n    <StyledPicker>\n      <tbody>\n        {pickerTable.map((row, rowIdx) => (\n          <tr key={rowIdx}>\n            {row.map((value) => (\n              <PickerCell\n                key={`${rowIdx}-${value}`}\n                onClick={(e) => onPick(e, value)}\n              >\n                {value}\n              </PickerCell>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </StyledPicker>\n  );\n};\n\nexport default Picker;\n","import styled from \"styled-components\";\nimport {\n  SudokuBoard,\n  SudokuBoardCell,\n  SudokuBoardRow,\n} from \"./types/board.type\";\nimport { BoardCellPosition } from \"./types/cell.type\";\nimport Picker from \"./Picker\";\n\nconst Board = styled.table`\n  border-collapse: collapse;\n  border: 3px solid #333;\n  flex: 0 0 837px;\n`;\n\nconst BoardRow = styled.tr`\n  &:nth-child(3n) {\n    border-bottom: 3px solid #333;\n  }\n`;\n\nconst BoardCell = styled.td<BoardCellStyle>`\n  border: 1px solid #333;\n  width: 91px;\n  height: 91px;\n  font-size: 32px;\n  font-weight: ${({ isPrefilled }) => (isPrefilled ? \"700\" : \"400\")};\n  color: ${({ isError }) => (isError ? \"red\" : \"#333\")};\n  cursor: ${({ isPrefilled }) => (isPrefilled ? \"initial\" : \"pointer\")};\n  background-color: ${({ isSelected }) =>\n    isSelected ? \"#a89243\" : \"transparent\"};\n  text-align: center;\n  vertical-align: middle;\n\n  &:nth-child(3n) {\n    border-right: 3px solid #333;\n  }\n`;\n\ntype SudokuBoardTableProps = {\n  sudokuBoardValues: SudokuBoard;\n  selected: BoardCellPosition;\n  onPick: (\n    e: React.MouseEvent<HTMLTableDataCellElement>,\n    value: number\n  ) => void;\n  onSelect: (pos: BoardCellPosition) => void;\n};\n\ntype BoardCellStyle = {\n  isSelected: boolean;\n  isError: boolean;\n  isPrefilled: boolean;\n};\n\nconst SudokuBoardTable = ({\n  sudokuBoardValues,\n  selected,\n  onPick,\n  onSelect,\n}: SudokuBoardTableProps) => {\n  const isSelected = (pos1: BoardCellPosition, pos2: BoardCellPosition) => {\n    return pos1[0] === pos2[0] && pos1[1] === pos2[1];\n  };\n\n  return (\n    <Board>\n      <tbody>\n        {sudokuBoardValues.map((row: SudokuBoardRow, rowIdx: number) => (\n          <BoardRow key={rowIdx}>\n            {row.map((cell: SudokuBoardCell, cellIdx: number) => (\n              <BoardCell\n                key={`${rowIdx}-${cellIdx}`}\n                isSelected={isSelected(selected, [rowIdx, cellIdx])}\n                isError={cell.isError}\n                isPrefilled={cell.isPrefilled}\n                onClick={\n                  !cell.isPrefilled\n                    ? () => onSelect([rowIdx, cellIdx])\n                    : () => {}\n                }\n              >\n                {isSelected(selected, [rowIdx, cellIdx]) ? (\n                  <Picker onPick={onPick} />\n                ) : (\n                  <span>{cell.value}</span>\n                )}\n              </BoardCell>\n            ))}\n          </BoardRow>\n        ))}\n      </tbody>\n    </Board>\n  );\n};\n\nexport default SudokuBoardTable;\n","import { SudokuBoard } from \"../types/board.type\";\n\nconst isSudokuComplete = (sudoku: SudokuBoard): boolean => {\n  for (let i = 0; i < sudoku.length; i++) {\n    for (let j = 0; j < sudoku[i].length; j++) {\n      if (sudoku[i][j].value === null) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nexport default isSudokuComplete;\n","import { Status } from \"../data/status.enum\";\n\nconst getMessage = (status?: Status): string => {\n  let message: string;\n  switch (status) {\n    case Status.COMPLETED:\n      message = \"Congrats, you did it!\";\n      break;\n    case Status.ERRORS:\n      message = \"Some fields need to be corrected...\";\n      break;\n    case Status.IN_PROGRESS:\n      message = \"So far, so good!\";\n      break;\n    case Status.PLAYING:\n      message = \"\";\n      break;\n    case Status.WRONG_INPUT:\n      message = \"Provided input is wrong, game started with default board!\";\n      break;\n    default:\n      message = \"\";\n      break;\n  }\n  return message;\n};\n\nexport default getMessage;\n","import styled from \"styled-components\";\nimport getMessage from \"./helpers/getMessage\";\nimport { Status } from \"./data/status.enum\";\n\nconst Message = styled.p`\n  flex: 0 0 100%;\n  height: 60px;\n  text-align: center;\n  font-size: 32px;\n  line-height: 60px;\n  margin-bottom: 30px;\n  color: #a89243;\n`;\n\nconst StatusMessage = ({ status }: { status: Status }) => {\n  return <Message>{getMessage(status)}</Message>;\n};\n\nexport default StatusMessage;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport validateBoard from \"./helpers/validateBoard\";\nimport { getInitialBoardWithStatus } from \"./helpers/getInitialBoardWithStatus\";\nimport { BoardCellPosition } from \"./types/cell.type\";\nimport { SudokuBoard } from \"./types/board.type\";\nimport GameControlPanel from \"./GameControlPanel\";\nimport SudokuBoardTable from \"./SudokuBoardTable\";\nimport isSudokuComplete from \"./helpers/checkCompletion\";\nimport { Status } from \"./data/status.enum\";\nimport StatusMessage from \"./StatusMessage\";\n\nconst StyledGame = styled.main`\n  display: flex;\n  flex-flow: row wrap;\n  align-items: flex-start;\n  justify-content: center;\n`;\n\nconst SudokuGame = () => {\n  const [selected, setSelected] = useState<BoardCellPosition>([null, null]);\n  const [sudokuBoard, setSudokuBoard] = useState<SudokuBoard>([[]]);\n  const [status, setStatus] = useState<Status>(Status.PLAYING);\n  const [inputValue, setInputValue] = useState<string>(\"\");\n\n  const onGetInitialBoardWithStatus = (input?: string): void => {\n    const { sudokuBoard, status } = getInitialBoardWithStatus(input);\n    setSudokuBoard(JSON.parse(JSON.stringify(sudokuBoard)));\n    setStatus(status);\n  };\n\n  useEffect(() => {\n    onGetInitialBoardWithStatus();\n  }, []);\n\n  const onValidate = (): void => {\n    const { sudokuBoard: updatedBoard, status } = validateBoard([\n      ...sudokuBoard,\n    ]);\n    setSudokuBoard(updatedBoard);\n    setStatus(status);\n    setSelected([null, null]);\n  };\n\n  const isValidCellPicked = (): boolean => {\n    return (\n      selected[0] !== null &&\n      selected[1] !== null &&\n      !sudokuBoard[selected[0]][selected[1]].isPrefilled\n    );\n  };\n\n  const onPick = (\n    e: React.MouseEvent<HTMLTableDataCellElement>,\n    value: number\n  ): void => {\n    e.stopPropagation();\n    const localBoard = [...sudokuBoard];\n    if (isValidCellPicked()) {\n      localBoard[selected[0] as number][selected[1] as number] = {\n        value,\n        isPrefilled: false,\n        isError: false,\n      };\n      if (isSudokuComplete(localBoard)) {\n        onValidate();\n        if (status === Status.IN_PROGRESS) {\n          setStatus(Status.COMPLETED);\n        }\n      } else {\n        setSudokuBoard(localBoard);\n        setStatus(Status.PLAYING);\n      }\n      setSelected([null, null]);\n    }\n  };\n\n  const onReset = (): void => {\n    onGetInitialBoardWithStatus();\n    setSelected([null, null]);\n  };\n\n  const onStart = (): void => {\n    onGetInitialBoardWithStatus(inputValue);\n    setInputValue(\"\");\n    setSelected([null, null]);\n  };\n\n  const onInputValueChange = (value: string): void => {\n    setInputValue(value);\n  };\n\n  const onSelect = (cellPosition: BoardCellPosition): void => {\n    setSelected(cellPosition);\n  };\n\n  return (\n    <StyledGame>\n      <StatusMessage status={status} />\n      <SudokuBoardTable\n        sudokuBoardValues={sudokuBoard}\n        selected={selected}\n        onPick={onPick}\n        onSelect={onSelect}\n      />\n      <GameControlPanel\n        onValidate={onValidate}\n        onReset={onReset}\n        onStart={onStart}\n        inputValue={inputValue}\n        onInputValueChange={onInputValueChange}\n      />\n    </StyledGame>\n  );\n};\n\nexport default SudokuGame;\n","import SudokuGame from \"./SudokuGame/SudokuGame\";\n\nfunction App() {\n  return (\n    <>\n      <SudokuGame />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}